/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/JSP_Servlet/Servlet.java to edit this template
 */
package Controllers;

import java.io.IOException;
import java.io.PrintWriter;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import models.AdminStaffs;
import models.NotificationDAO;
import models.PreRegistration;
import models.Students;
import models.Teachers;
import models.UserBasic;

/**
 *
 * @author Dwight
 */
public class SendNotificationController extends HttpServlet {




    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        NotificationDAO dao = new NotificationDAO();

        String role = request.getParameter("role");
        if (role == null || role.trim().isEmpty()) {
        request.setAttribute("error", "Vui l√≤ng ch·ªçn vai tr√≤ c·∫ßn tra c·ª©u.");
        request.getRequestDispatcher("SendNotification.jsp").forward(request, response);
        return;
    }
        
        List<UserBasic> list = dao.getUsersByRole(role);
        request.setAttribute("userList", list);
        request.setAttribute("classList", dao.getAllClasses());
        request.setAttribute("unpaidList", dao.getStudentsWithUnpaidPayments());
        request.setAttribute("preList", dao.getApprovedRegistrations());

        // Forward sang trang g·ª≠i th√¥ng b√°o
        request.getRequestDispatcher("SendNotification.jsp").forward(request, response);

    }

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {

        String sendType = request.getParameter("sendType");  // "individual", "role", "class"
        String message = request.getParameter("message");
        NotificationDAO dao = new NotificationDAO();
        String subject = "\uD83D\uDCE2 Th√¥ng b√°o t·ª´ trung t√¢m";

        switch (sendType) {
            case "individual" -> {
                String role = request.getParameter("role");
                String receiverId = request.getParameter("receiverId");
                dao.insertNotificationForOne(role, receiverId, message);

                String email = dao.getEmailByRoleAndId(role, receiverId);
                if (email != null && !email.isEmpty()) {
                    SendMail.send(email, subject, message);
                }
                request.setAttribute("message", "üì¨ ƒê√£ g·ª≠i th√¥ng b√°o c√° nh√¢n t·ªõi ID: " + receiverId);
            }

            case "role" -> {
                String roleAll = request.getParameter("roleAll");
                Map<String, String> roleEmailMap = dao.insertNotificationByRole(roleAll, message);
                for (Map.Entry<String, String> entry : roleEmailMap.entrySet()) {
                    if (entry.getValue() != null && !entry.getValue().isEmpty()) {
                        SendMail.send(entry.getValue(), subject, message);
                    }
                }
                request.setAttribute("message", "üì¨ ƒê√£ g·ª≠i th√¥ng b√°o ƒë·∫øn t·∫•t c·∫£ " + roleAll);
            }

            case "class" -> {
                String[] classIds = request.getParameterValues("classIds");
                if (classIds != null) {
                    Map<String, String> studentEmailMap = dao.insertNotificationByClasses(Arrays.asList(classIds), message);
                    for (Map.Entry<String, String> entry : studentEmailMap.entrySet()) {
                        if (entry.getValue() != null && !entry.getValue().isEmpty()) {
                            SendMail.send(entry.getValue(), subject, message);
                        }
                    }
                    request.setAttribute("message", "üì¨ ƒê√£ g·ª≠i th√¥ng b√°o ƒë·∫øn h·ªçc vi√™n trong c√°c l·ªõp ƒë√£ ch·ªçn.");
                }

            }

            case "unpaid" -> {
                List<Students> unpaidList = dao.getStudentsWithUnpaidPaymentsDetailed();
                for (Students s : unpaidList) {
                    dao.insertNotificationForOne("student", String.valueOf(s.getId()),
                            "B·∫°n ch∆∞a ho√†n t·∫•t h·ªçc ph√≠ cho kh√≥a h·ªçc: " + s.getCourseName());

                    SendMail.send(s.getEmail(),
                            "Nh·∫Øc nh·ªü thanh to√°n h·ªçc ph√≠",
                            "Xin ch√†o " + s.getName() + ",\n\n"
                            + message + ": " + s.getCourseName() + ". "
                            + "Vui l√≤ng thanh to√°n s·ªõm ƒë·ªÉ kh√¥ng ·∫£nh h∆∞·ªüng ƒë·∫øn vi·ªác h·ªçc.\n\n"
                            + "Tr√¢n tr·ªçng.");
                }
                request.setAttribute("message", "üí∞ ƒê√£ g·ª≠i th√¥ng b√°o ƒë·∫øn " + unpaidList.size() + " sinh vi√™n ch∆∞a ƒë√≥ng ti·ªÅn.");
            }

            case "preapproved" -> {
                List<PreRegistration> preList = dao.getApprovedRegistrationsDetailed();
                for (PreRegistration p : preList) {
                    dao.insertNotificationByEmail(p.getEmail(),
                            "Ch√†o m·ª´ng b·∫°n ƒë√£ ƒë∆∞·ª£c duy·ªát tham gia kh√≥a h·ªçc: " + p.getCourseName());

                    SendMail.send(p.getEmail(),
                            "Th√¥ng b√°o x√°c nh·∫≠n ƒëƒÉng k√Ω kh√≥a h·ªçc",
                            "Xin ch√†o " + p.getFull_name() + ",\n\n"
                            + "B·∫°n ƒë√£ ƒë∆∞·ª£c duy·ªát tham gia kh√≥a h·ªçc: " + p.getCourseName() + ".\n"
                            + "Th√¥ng tin ƒëƒÉng nh·∫≠p h·ªá th·ªëng:\n"
                            + "- T√†i Kho·∫£n: " + p.getPhone() + "\n\n"
                            + "- M·∫≠t kh·∫©u: " + p.getPhone() + "\n\n"
                            + "Vui l√≤ng ƒëƒÉng nh·∫≠p v√† ho√†n t·∫•t c√°c b∆∞·ªõc ti·∫øp theo.\n\n"
                            + "Tr√¢n tr·ªçng.");

                    dao.updateStatus(p.getId(), "ƒê√£ active");
                }
                request.setAttribute("message", "‚úÖ ƒê√£ g·ª≠i t√†i kho·∫£n v√† th√¥ng b√°o ƒë·∫øn " + preList.size() + " h·ªçc vi√™n ƒë√£ duy·ªát.");
            }

        }
        request.setAttribute("unpaidList", dao.getStudentsWithUnpaidPayments());
        request.setAttribute("preList", dao.getApprovedRegistrations());
        request.setAttribute("success", "\u2714\uFE0F G·ª≠i th√¥ng b√°o th√†nh c√¥ng!");
        request.setAttribute("classList", dao.getAllClasses());
        request.getRequestDispatcher("SendNotification.jsp").forward(request, response);
    }
}
